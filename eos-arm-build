#!/bin/bash

_partition_Radxa5b() {
    dd if=/dev/zero of=$DEVICENAME bs=1M count=18
    dd if=$WORKDIR/configs/rk3588-uboot.img of=$DEVICENAME
#    dd if=$WORKDIR/configs/rk3588-uboot.img ibs=1 skip=0 count=15728640 of=$DEVICENAME
    printf "\n\n${CYAN}36b9ce1a8ebda8e5d03dae8b9be5f361${NC}\n"
    dd if=$DEVICENAME ibs=1 skip=0 count=15728640 | md5sum
    printf "\nBoth check sums should be the same\n\n"
    parted --script -a minimal $DEVICENAME \
    mklabel gpt \
    mkpart primary 17MB 266MB \
    mkpart primary 266MB $DEVICESIZE"MB" \
    quit
}

_partition_Pinebook() {
    dd if=/dev/zero of=$DEVICENAME bs=1M count=16
    parted --script -a minimal $DEVICENAME \
    mklabel msdos \
    unit mib \
    mkpart primary fat32 16MiB 216MiB \
    mkpart primary 216MiB $DEVICESIZE"MiB" \
    quit
}

_partition_OdroidN2() {
    parted --script -a minimal $DEVICENAME \
    mklabel msdos \
    mkpart primary fat32 2MB 258MB \
    mkpart primary 258MB $DEVICESIZE"MB" \
    quit
}

_partition_RPi4() {
    parted --script -a minimal $DEVICENAME \
    mklabel gpt \
    mkpart primary fat32 2MB 202MB \
    mkpart primary 202MB $DEVICESIZE"MB" \
    quit
}

_copy_stuff_for_chroot() {
    mkdir $WORKDIR/MP/home/alarm
    cp $WORKDIR/eos-arm-chroot $WORKDIR/MP/root/
    cp -r $WORKDIR/configs/ $WORKDIR/MP/root/
    printf "$PLAT\n" > platformname
    cp platformname $WORKDIR/MP/root/
    rm platformname
    printf "$TYPE\n" > type
    cp type $WORKDIR/MP/root/
    rm type
}

_fstab_uuid() {

    local fstabuuid=""

    printf "\n${CYAN}Changing /etc/fstab to UUID numbers instead of a lable such as /dev/sda.${NC}\n"
    mv $WORKDIR/MP/etc/fstab $WORKDIR/MP/etc/fstab-bkup
    fstabuuid=$(lsblk -o UUID $PARTNAME1)
    fstabuuid=$(echo $fstabuuid | sed 's/ /=/g')
    printf "# /etc/fstab: static file system information.\n#\n# Use 'blkid' to print the universally unique identifier for a device; this may\n" > $WORKDIR/MP/etc/fstab
    printf "# be used with UUID= as a more robust way to name devices that works even if\n# disks are added and removed. See fstab(5).\n" >> $WORKDIR/MP/etc/fstab
    printf "#\n# <file system>             <mount point>  <type>  <options>  <dump>  <pass>\n\n"  >> $WORKDIR/MP/etc/fstab
    printf "$fstabuuid  /boot  vfat  defaults  0  0\n\n" >> $WORKDIR/MP/etc/fstab
}   # end of fucntion _fstab_uuid

_install_Radxa5b_image() {

    local uuidMP2
    local old

    pacstrap -cGM MP - < $WORKDIR/build-configs/ARM-pkglist.txt
    _copy_stuff_for_chroot
    cp -r $WORKDIR/configs/extlinux MP/boot/
    if [ "$TYPE" == "Image" ]; then
       _fstab_uuid
       # change extlinux.conf to UUID instead of partition label.
       uuidMP2=$(lsblk -o UUID $PARTNAME2)
       uuidMP2=$(echo $uuidMP2 | sed 's/ /=/g')
       old=$(grep 'root=' $WORKDIR/MP/boot/extlinux/extlinux.conf | awk '{print $2}')
       uuidMP2="root="$uuidMP2
       sed -i "s#$old#$uuidMP2#" $WORKDIR/MP/boot/extlinux/extlinux.conf
    fi
}   # End of function _install_Radxa5b_image

_install_Pinebook_image() {

    local uuidMP2
    local old

    pacstrap -cGM MP - < $WORKDIR/build-configs/ARM-pkglist.txt
    _copy_stuff_for_chroot
    if [ "$TYPE" == "Image" ]; then
       _fstab_uuid
       # change extlinux.conf to UUID instead of partition label.
       uuidMP2=$(lsblk -o UUID $PARTNAME2)
       uuidMP2=$(echo $uuidMP2 | sed 's/ /=/g')
       old=$(grep 'root=' $WORKDIR/MP/boot/extlinux/extlinux.conf | awk '{print $5}')
       uuidMP2="root="$uuidMP2
      sed -i "s#$old#$uuidMP2#" $WORKDIR/MP/boot/extlinux/extlinux.conf
    fi
}   # End of function _install_Pinebook_image

_install_OdroidN2_image() {

    local uuidMP2
    local old

    pacstrap -cGM MP - < $WORKDIR/build-configs/ARM-pkglist.txt
    _copy_stuff_for_chroot
    if [ "$TYPE" == "Image" ]; then
       _fstab_uuid
       # change boot.ini to UUID instead of partition label.
       uuidMP2=$(lsblk -o UUID $PARTNAME2)
       uuidMP2=$(echo $uuidMP2 | sed 's/ /=/g')
       uuidMP2="\"root="$uuidMP2
       old=$(cat $WORKDIR/MP/boot/boot.ini | grep root= | awk '{print $3}')
       sed -i "s#$old#$uuidMP2#" $WORKDIR/MP/boot/boot.ini
    fi
}   # End of function _install_OdroidN2_image

_install_RPi4_image() {

    local uuidMP2
    local old

     pacstrap -cGM MP - < $WORKDIR/build-configs/ARM-pkglist.txt
    _copy_stuff_for_chroot
    if [ "$TYPE" == "Image" ]; then
       _fstab_uuid
       # change boot.ini to UUID instead of partition label.
       uuidMP2=$(lsblk -o UUID $PARTNAME2)
       uuidMP2=$(echo $uuidMP2 | sed 's/ /=/g')
       uuidMP2="root="$uuidMP2
       old=$(cat $WORKDIR/MP/boot/cmdline.txt | grep root= | awk '{print $1}')
       sed -i "s#$old#$uuidMP2#" $WORKDIR/MP/boot/cmdline.txt
    fi
}  # End of function _install_RPi4_image

_partition_format_mount() {
   fallocate -l 8.5G test.img
   fallocate -d test.img
   DVN=$(losetup --find --show test.img)
   DEVICENAME="$DVN"
   printf "\n${CYAN} DEVICENAME ${NC}\n"
   echo $DEVICENAME
   echo $DVN
   ##### Determine data device size in MiB and partition #####
   printf "\n${CYAN}Partitioning, & formatting storage device...${NC}\n"
   DEVICESIZE=8192
   case $PLATFORM in
      Rpi4 | Rpi5) _partition_RPi4 ;;
      OdroidN2)    _partition_OdroidN2 ;;
      Pinebook)    _partition_Pinebook ;;
      Radxa5b)     _partition_Radxa5b ;;
   esac

   printf "\n${CYAN}Formatting storage device $DEVICENAME...${NC}\n"
   printf "\n${CYAN}If \"/dev/sdx contains a ext4 file system Labelled XXXX\" or similar appears, Enter: y${NC}\n\n\n"
   PARTNAME1=$DEVICENAME"p1"
   mkfs.fat -n BOOT_EOS $PARTNAME1
   PARTNAME2=$DEVICENAME"p2"
   mkfs.ext4 -F -L ROOT_EOS $PARTNAME2

   mkdir $WORKDIR/MP
   mount $PARTNAME2 $WORKDIR/MP
   mkdir $WORKDIR/MP/boot
   mount $PARTNAME1 $WORKDIR/MP/boot
} # end of function _partition_format_mount

_check_if_root() {
    local whiptail_installed

    if [ $(id -u) -ne 0 ]
    then
       whiptail_installed=$(pacman -Qs libnewt)
       if [[ "$whiptail_installed" != "" ]]; then
          whiptail --title "Error - Cannot Continue" --msgbox "  Please run this script as sudo or root" 8 47
          exit
       else
          printf "${RED}Error - Cannot Continue. Please run this script as sudo or root.${NC}\n"
          exit
       fi
    fi
    if [[ "$SUDO_USER" == "" ]]; then     
         USERNAME=$USER
    else
         USERNAME=$SUDO_USER  
    fi
}  # end of function _check_if_root

_arch_chroot(){
    arch-chroot $WORKDIR/MP /root/eos-arm-chroot
}

_create_image(){
    case $PLATFORM in
       Radxa5b) image_name="enosLinuxARM-radxa-5B-latest.img.xz"  ;;
       OdroidN2) image_name="enosLinuxARM-odroid-n2-latest.img.xz" ;;
       Pinebook) image_name="enosLinuxARM-pbp-latest.img.xz" ;;
       Rpi4) image_name="enosLinuxARM-rpi4-latest.img.xz" ;;
       Rpi5) image_name="enosLinuxARM-rpi5-latest.img.xz" ;;
    esac
    xz -kvfT0 -2 $WORKDIR/test.img
    cp $WORKDIR/test.img.xz /home/$USERNAME/endeavouros-arm/test-images/$image_name
    printf "\n\nCreating the image is finished.\nand will calculate a sha512sum\n\n"
    cd /home/$USERNAME/endeavouros-arm/test-images/
    sha512sum $image_name > $image_name".sha512sum"
    cd $WORKDIR
}   # end of function _create_image

_create_rootfs(){
    case $PLATFORM in
       Radxa5b) image_name="enosLinuxARM-radxa-5b-latest.tar.zst" ;;
       OdroidN2) image_name="enosLinuxARM-odroid-n2-latest.tar.zst" ;;
       Pinebook) image_name="enosLinuxARM-pbp-latest.tar.zst" ;;
       Rpi4) image_name="enosLinuxARM-rpi4-latest.tar.zst" ;;
       Rpi5) image_name="enosLinuxARM-rpi5-latest.tar.zst" ;;
    esac
          cd $WORKDIR/MP
          time bsdtar -cf - * | zstd -z --rsyncable -10 -T0 -of /home/$USERNAME/endeavouros-arm/test-images/$image_name
          printf "\n\nbsdtar is finished creating the image.\nand will calculate a sha512sum\n\n"
          cd /home/$USERNAME/endeavouros-arm/test-images/
          sha512sum $image_name > $image_name".sha512sum"
          cd $WORKDIR
}   # end of function _create_rootfs

_help() {
   # Display Help
   printf "\nHELP\n"
   printf "Build EndeavourOS ARM Images\n"
   printf "options:\n"
   printf " -h  Print this Help.\n\n"
   printf "All these options are required\n"
   printf " -p  enter platform: rpi4 or rpi5 or odn or pbp or rad\n"
   printf " -t  image type: r (for rootfs) or i (for image) \n"
   printf " -c  create image: y or n\n"
   printf "example: sudo ./eos-arm-build -p rpi4 -t i -c y \n\n"
}

_read_options() {
    # Available options
    opt=":p:t:c:h:"
    local OPTIND

    if [[ ! $@ =~ ^\-.+ ]]
    then
      echo "The script requires an argument, aborting"
      _help
      exit 1
    fi

    while getopts "${opt}" arg; do
      case $arg in
        p)
          PLAT="${OPTARG}"
          ;;
        t)
          TYP="${OPTARG}"
          ;;
        c)
          CRE="${OPTARG}"
          ;;
        \?)
          echo "Option -${OPTARG} is not valid, aborting"
          _help
          exit 1
          ;;
        h|?)
          _help
          exit 1
          ;;
        :)
          echo "Option -${OPTARG} requires an argument, aborting"
          _help
          exit 1
          ;;
      esac
    done
    shift $((OPTIND-1))

    case $PLAT in
         rpi4) PLATFORM="Rpi4" ;;
         rpi5) PLATFORM="Rpi5" ;;
         odn) PLATFORM="OdroidN2" ;;
         pbp) PLATFORM="Pinebook" ;;
         rad) PLATFORM="Radxa5b" ;;
           *) PLAT1=true;;
    esac

    case $CRE in
         y) CREATE=true ;;
         n) CREATE=false ;;
         *) CREATE=true ;;
    esac

    case $TYP in
         r) TYPE="Rootfs" ;;
         i) TYPE="Image" ;;
         *) TYPE=" " ;;
    esac
}

#################################################
# beginning of script
#################################################

Main() {
    # VARIABLES
    PLAT=""
    PLATFORM=" "     # e.g. OdroidN2, RPi4b, etc.
    DEVICENAME=" "   # storage device name e.g. /dev/sda
    DEVICESIZE="1"
    PARTNAME1=" "
    PARTNAME2=" "
    USERNAME=" "
    CRE=" "
    CREATE=" "
    TYP=" "
    TYPE=" "
    ARCH="$(uname -m)"
    WORKDIR=$(pwd)
    
    # Declare color variables
    GREEN='\033[0;32m'
    RED='\033[0;31m'
    CYAN='\033[0;36m'
    NC='\033[0m' # No Color

    pacman -S --noconfirm --needed libnewt arch-install-scripts time &>/dev/null # for whiplash dialog
    _check_if_root
    _read_options "$@"

    rm -rf test.img test.img.xz
    _partition_format_mount  # function to partition, format, and mount a uSD card or eMMC card
    cp $WORKDIR/build-configs/ISO-packages.txt  $WORKDIR/build-configs/ARM-pkglist.txt
    case $PLATFORM in
       Rpi4)    cat $WORKDIR/build-configs/addons-rpi4.txt >> $WORKDIR/build-configs/ARM-pkglist.txt
                 _install_RPi4_image ;;
       Rpi5)     cat $WORKDIR/build-configs/addons-rpi5.txt >> $WORKDIR/build-configs/ARM-pkglist.txt
                 _install_RPi4_image ;;
       OdroidN2) cat $WORKDIR/build-configs/addons-odn.txt >> $WORKDIR/build-configs/ARM-pkglist.txt
                 _install_OdroidN2_image ;;
       Pinebook) cat $WORKDIR/build-configs/addons-pbp.txt >> $WORKDIR/build-configs/ARM-pkglist.txt
                 _install_Pinebook_image ;;
       Radxa5b)  cat $WORKDIR/build-configs/addons-radxa5b.txt >> $WORKDIR/build-configs/ARM-pkglist.txt
                 _install_Radxa5b_image ;;
    esac
    rm $WORKDIR/build-configs/ARM-pkglist.txt
    printf "\n\n${CYAN}arch-chroot to configure image.${NC}\n\n"
    _arch_chroot
    
    case $PLATFORM in
       OdroidN2)
          dd if=MP/boot/u-boot.bin of=$DEVICENAME conv=fsync,notrunc bs=512 seek=1
          ;;
       Pinebook)
           dd if=MP/boot/Tow-Boot.noenv.bin of=$DEVICENAME seek=64 conv=notrunc,fsync
           ;;
    esac
    
    if $CREATE ; then

        if [ "$TYPE" == "Rootfs" ]; then
            printf "\n\n${CYAN}Creating Rootfs${NC}\n\n"
            _create_rootfs
            printf "\n\n${CYAN}Created Rootfs${NC}\n\n"
        fi
    fi

    umount MP/boot MP
    rm -rf MP

    losetup -d $DEVICENAME
    # rm ArchLinuxARM*
    if $CREATE ; then
        if [ "$TYPE" == "Image" ]; then
            printf "\n\n${CYAN}Creating Image${NC}\n\n"
            _create_image
            printf "\n\n${CYAN}Created Image${NC}\n\n"
        fi
    fi

    exit
}

Main "$@"
